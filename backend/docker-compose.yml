version: '3'

volumes:
  # mgdata:
  pgdata:
  redisdata:
  static_files:
  uploaded_files:

services:

  python:
    container_name: python
    build:
      context: .
      dockerfile: ./dockerfiles/python/Dockerfile
    volumes:
      - ./src:/src
      - static_files:/static_files
      - uploaded_files:/uploaded_files
    ports:
      - "5000:5000"
    expose:
      - "5000"
    command: sh /run_web.sh
    restart: always
    env_file:
      - ./.app_envs/.web
      - ./.app_envs/.mongodb
      - ./.app_envs/.gunicorn
      - ./.app_envs/.smtpconfig
    depends_on:
      # - mongodb
      - postgres
      - redis
      - rabbitmq
      - celery_worker

  postgres:
    image: postgres:9.6-alpine

    volumes:
      - pgdata:/var/lib/postgresql/data/
    env_file:
      - ./.app_envs/.postgres
    # environment:
    #   - POSTGRES_USER=user
    #   - POSTGRES_PASSWORD=password
    #   - POSTGRES_DB=db
    ports:
      - 5432:5432


  # mongodb:
  #   image: "mongo:4.0.4"
  #   restart: always
  #   volumes:
  #     - mgdata:/var/lib/mongodb/data/
  #   # env_file:
  #   #   - ./.app_envs/.mongodb
  #   environment:
  #     MONGO_INITDB_ROOT_USERNAME: mguz
  #     MONGO_INITDB_ROOT_PASSWORD: mguzpass
  #     MONGO_INITDB_DATABASE: mguzdb
  #   ports:
  #     - 27017:27017

  # mongo-express:
  #   image: mongo-express
  #   restart: always
  #   env_file:
  #     - ./.app_envs/.mongodb
  #   ports:
  #     - 8081:8081
  #   environment:
  #     ME_CONFIG_MONGODB_ADMINUSERNAME: mguz
  #     ME_CONFIG_MONGODB_ADMINPASSWORD: mguzpass


  nginx:
    container_name: nginx
    build:
      context: . # We set this context to load the app requirements when building the image
      dockerfile: ./dockerfiles/nginx/Dockerfile
    ports:
      - "8000:8000"
    expose:
      - "8000"
    volumes:
      # nginx needs to access static files (readonly) and uploaded files(read+write)
      - static_files:/static_files
      - uploaded_files:/uploaded_files
    depends_on:
      - python

  redis:
    restart: always
    image: redis:latest
    ports:
      - "6379:6379"
    expose:
      - "6379"
    volumes:
      - redisdata:/data

  rabbitmq:
    image: "rabbitmq:3-management"
    restart: on-failure
    ports:
      - "15672:15672"
      - "5672:5672"

  celery_worker:
    build:
      context: .
      dockerfile: ./dockerfiles/python/Dockerfile
    command: celery -A config.celery worker --loglevel=info
    depends_on:
      - rabbitmq
      - postgres
      - redis
    volumes:
    - ./src:/src
  